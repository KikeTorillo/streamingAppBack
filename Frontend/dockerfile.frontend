# üé® Dockerfile para Frontend React + Vite + Storybook
# Optimizado para desarrollo con Hot Reload

# ==========================================
# üì¶ STAGE 1: Base con Node.js LTS
# ==========================================
FROM node:18-alpine AS base

# Metadata del contenedor
LABEL maintainer="arellanestorillo@yahoo.com"
LABEL description="Frontend StreamingApp con React, Vite y Storybook"
LABEL version="2.0"

# Variables de build
ARG NODE_ENV=development
ENV NODE_ENV=${NODE_ENV}

# Configuraci√≥n de Node.js optimizada
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache \
    curl \
    git \
    && rm -rf /var/cache/apk/*

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# ==========================================
# üìã STAGE 2: Dependencias
# ==========================================
FROM base AS dependencies

# Directorio de trabajo
WORKDIR /app

# Copiar archivos de configuraci√≥n de dependencias
COPY package*.json ./
COPY yarn.lock* ./

# Instalar dependencias seg√∫n el entorno
RUN if [ "$NODE_ENV" = "production" ]; then \
        npm ci --only=production && npm cache clean --force; \
    else \
        npm install; \
    fi

# ==========================================
# üì± STAGE 3: Desarrollo (Hot Reload)
# ==========================================
FROM dependencies AS development

# Variables espec√≠ficas de desarrollo
ENV VITE_HMR_PORT=5173
ENV VITE_HOST=0.0.0.0
ENV VITE_PORT=5173
ENV CHOKIDAR_USEPOLLING=true

# Copiar c√≥digo fuente
COPY . .

# Cambiar propietario a usuario no-root
RUN chown -R nodejs:nodejs /app
USER nodejs

# Exponer puertos
EXPOSE 5173 6006

# Healthcheck para verificar que Vite est√© funcionando
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5173 || exit 1

# Script de inicio para desarrollo
CMD ["sh", "-c", "npm run dev & npm run storybook"]

# ==========================================
# üèóÔ∏è STAGE 4: Build de Producci√≥n
# ==========================================
FROM dependencies AS builder

# Copiar c√≥digo fuente
COPY . .

# Build de la aplicaci√≥n
RUN npm run build

# Build de Storybook
RUN npm run build-storybook

# ==========================================
# üöÄ STAGE 5: Producci√≥n con NGINX
# ==========================================
FROM nginx:alpine AS production

# Metadata de producci√≥n
LABEL stage="production"

# Copiar archivos construidos
COPY --from=builder /app/dist /usr/share/nginx/html
COPY --from=builder /app/storybook-static /usr/share/nginx/html/storybook

# Configuraci√≥n personalizada de NGINX
COPY nginx.conf /etc/nginx/nginx.conf

# Crear usuario no-root
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Cambiar propietario de archivos
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Cambiar a usuario no-root
USER nginx

# Exponer puerto
EXPOSE 80

# Healthcheck para NGINX
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Comando por defecto
CMD ["nginx", "-g", "daemon off;"]

# ==========================================
# üéØ STAGE FINAL: Selecci√≥n seg√∫n NODE_ENV
# ==========================================
FROM ${NODE_ENV} AS final