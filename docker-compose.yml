# üöÄ DOCKER COMPOSE PRODUCCI√ìN - SYNOLOGY OPTIMIZADO
# Basado en la estructura de docker-compose.dev.yml
services:
  # üóÑÔ∏è POSTGRESQL - Base de datos principal
  postgres:
    image: postgres:16
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - TZ=America/Mexico_City
    volumes:
      - ./servers/postgresQl/postgres_data:/var/lib/postgresql/data
      - ./servers/postgresQl/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lan
    ports:
      - "${DB_PORT}:5432"

  # üìä PGADMIN - Administraci√≥n de base de datos (opcional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-prod
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PG_PASSWORD}
    networks:
      - lan
    ports:
      - "${PG_PORT}:80"
    depends_on:
      - postgres

  # üóÇÔ∏è MINIO - Almacenamiento S3 compatible
  minio:
    image: minio/minio
    container_name: minio-prod
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./servers/minio/data:/data
    networks:
      - lan
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    command: server /data --console-address ":9001"

  # üñ•Ô∏è BACKEND - API Node.js
  backend:
    build:
      context: ./backend/app
      dockerfile: dockerfile.app
    container_name: backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - WHITE_LIST=${WHITE_LIST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - IP_ADDRESS_POSTGRESQL=postgres  # Usar nombre del servicio
      - DB_PORT=5432                    # Puerto interno
      - DB_NAME=${DB_NAME}
      - API_KEY=${API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - FRONT_URL_LOCAL=http://localhost:8080  # URL externa del frontend
      - EMAIL=${EMAIL}
      - PASS_EMAIL=${PASS_EMAIL}
      - MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
      - MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - IP_ADDRESS_MINIO=minio           # Usar nombre del servicio
      - MINIO_PORT=9000
      - MINIO_BUCKET=${MINIO_BUCKET}
      - TEMP_PROCESSING_DIR=${TEMP_PROCESSING_DIR}
      - BACK_PORT=3000
    volumes:
      - ./backend/app:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - lan
    ports:
      - "3000:3000"  # Exponer para desarrollo/debug
    depends_on:
      - postgres
      - minio

  # üé® FRONTEND - React + NGINX optimizado
  frontend:
    build:
      context: ./frontend/app
      dockerfile: dockerfile.frontend.prod
    container_name: frontend
    restart: unless-stopped
    ports:
      - "8080:80"    # Puerto principal de acceso
    depends_on:
      - backend
    networks:
      - lan

  # üåê CDN - Servidor de distribuci√≥n de contenido
  cdn1:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./cdn/nginx.conf.template
    container_name: cdn1-prod
    restart: unless-stopped
    environment:
      - NGINX_TRANSCODER1=transcoder1   # Usar nombres de servicios
      - NGINX_TRANSCODER2=transcoder2
    volumes:
      - ./servers/cdn/nginx_cache:/var/cache/nginx
      - ./servers/cdn/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    ports:
      - "8082:80"
    depends_on:
      - transcoder1
      - transcoder2

  # üéûÔ∏è TRANSCODER1 - Servidor de transcodificaci√≥n principal
  transcoder1:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder1/nginx.conf.template
    container_name: transcoder1-prod
    restart: unless-stopped
    environment:
      - NGINX_MINIO_SERVER=minio:9000   # Usar nombre del servicio
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder1/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder1/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    depends_on:
      - minio

  # üéûÔ∏è TRANSCODER2 - Servidor de transcodificaci√≥n secundario
  transcoder2:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder2/nginx.conf.template
    container_name: transcoder2-prod
    restart: unless-stopped
    environment:
      - NGINX_MINIO_SERVER=minio:9000   # Usar nombre del servicio
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder2/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder2/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    depends_on:
      - minio

# üåê RED DOCKER - Comunicaci√≥n interna entre servicios
networks:
  lan:
    driver: bridge