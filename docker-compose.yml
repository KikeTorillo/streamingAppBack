# üöÄ DOCKER COMPOSE PRODUCCI√ìN - SYNOLOGY OPTIMIZADO
# Basado en la estructura de docker-compose.dev.yml
services:
  # üóÑÔ∏è POSTGRESQL - Base de datos principal
  postgres:
    build: ./servers/postgresQl
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - TZ=America/Mexico_City
    volumes:
      - ./servers/postgresQl/postgres_data:/var/lib/postgresql/data
      - ./servers/postgresQl/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lan
    ports:
      - "${DB_PORT}:5432"

  # üìä PGADMIN - Administraci√≥n de base de datos (opcional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PG_PASSWORD}
    networks:
      - lan
    ports:
      - "${PG_PORT}:80"
    depends_on:
      - postgres

  # üóÇÔ∏è MINIO - Almacenamiento S3 compatible
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_REGION=${MINIO_REGION}
    volumes:
      - ./servers/minio/aws3DataMinio:/data
    networks:
      - lan
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_PANEL_PORT}:9001"
    command: server /data --console-address ":9001"
  
  # Inicializador de MinIO
  minio-init:
    image: alpine:latest
    container_name: minio-init
    depends_on:
      - minio
    environment:
      - MINIO_HOST=${IP_ADDRESS_MINIO}  # minio
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ./servers/minio/init-minio.sh:/init-minio.sh
    entrypoint: ["/bin/sh", "/init-minio.sh"]
    networks:
      - lan

  # üñ•Ô∏è BACKEND - API Node.js
  backend:
    build:
      context: ./backend/app
      dockerfile: dockerfile.app
    container_name: back
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - IP_ADDRESS_POSTGRESQL=postgres
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - IP_ADDRESS_MINIO=minio
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${IP_ADDRESS_POSTGRESQL}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - MINIO_ENDPOINT=${IP_ADDRESS_MINIO}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
      - TEMP_PROCESSING_DIR=${TEMP_PROCESSING_DIR}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - EMAIL=${EMAIL}
      - PASS_EMAIL=${PASS_EMAIL}
      - BACK_PORT=${BACK_PORT}
      - FRONT_URL_LOCAL=${FRONT_URL_LOCAL}
      - WHITE_LIST=${WHITE_LIST}
    volumes:
      - ./backend/app:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - lan
    ports:
      - "3000:3000"  # Exponer para desarrollo/debug
    depends_on:
      - postgres
      - minio

  # üé® FRONTEND - React + NGINX optimizado
  frontend:
    build:
      context: ./frontend/app
      dockerfile: dockerfile.frontend.prod
      args:
        - VITE_API_KEY=${VITE_API_KEY}
        - VITE_FRONT_URL_LOCAL=${VITE_FRONT_URL_LOCAL}
        - VITE_MODE=${VITE_MODE}
        - VITE_HOST_LOCAL=${VITE_HOST_LOCAL}
        - VITE_TMDB_API_KEY=${VITE_TMDB_API_KEY}
    container_name: front
    restart: unless-stopped
    ports:
      - "8080:80"    # Puerto principal de acceso
    depends_on:
      - backend
    networks:
      - lan

  # üåê CDN - Servidor de distribuci√≥n de contenido
  cdn1:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./cdn/nginx.conf.template
    container_name: cdn1
    restart: unless-stopped
    environment:
      - NGINX_TRANSCODER1=${NGINX_IP_ADDRESS_TRANSCODER1}  # transcoder1
      - NGINX_TRANSCODER2=${NGINX_IP_ADDRESS_TRANSCODER2}  # transcoder2
    volumes:
      - ./servers/cdn/nginx_cache:/var/cache/nginx
      - ./servers/cdn/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    depends_on:
      - transcoder1
      - transcoder2
    ports:
      - "8082:80"

  # üéûÔ∏è TRANSCODER1 - Servidor de transcodificaci√≥n principal
  transcoder1:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder1/nginx.conf.template
    container_name: transcoder1  # ‚úÖ Nombre fijo del contenedor
    environment:
      - NGINX_MINIO_SERVER=${IP_ADDRESS_MINIO}:${MINIO_PORT}  # minio:9000
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder1/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder1/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    restart: always
    depends_on:
      - minio

  # üéûÔ∏è TRANSCODER2 - Servidor de transcodificaci√≥n secundario
  transcoder2:
    build:
      context: ./servers
      dockerfile: dockerfile
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder2/nginx.conf.template
    container_name: transcoder2  # ‚úÖ Nombre fijo del contenedor
    environment:
      - NGINX_MINIO_SERVER=${IP_ADDRESS_MINIO}:${MINIO_PORT}  # minio:9000
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder2/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder2/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    restart: always
    depends_on:
      - minio
      
# üåê RED DOCKER - Comunicaci√≥n interna entre servicios
networks:
  lan:
    driver: bridge